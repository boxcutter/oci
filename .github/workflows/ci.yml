name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  # Job to run change detection
  changes:
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'images' output variable
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine Paths to Build for Auto Trigger
        uses: dorny/paths-filter@v2
        id: filter
        with:
          # Use context to get the branch where commits were pushed.
          # If there is only one long-lived branch (e.g. master),
          # you can specify it directly.
          # If it's not configured, the repository default branch is used.
          base: ${{ github.ref }}
          filters: | 
            aws-cli: 'aws-cli/**'
            black: 'black/**'
            buildpack-deps/ubuntu/jammy/curl: 'buildpack-deps/ubuntu/jammy/curl/**'
            buildpack-deps/ubuntu/jammy/scm: 'buildpack-deps/ubuntu/jammy/scm/**'
            buildpack-deps/ubuntu/jammy: 'buildpack-deps/ubuntu/jammy/*'
            buildpack-deps/ubuntu/noble/curl: 'buildpack-deps/ubuntu/noble/curl/**'
            buildpack-deps/ubuntu/noble/scm: 'buildpack-deps/ubuntu/noble/scm/**'
            buildpack-deps/ubuntu/noble: 'buildpack-deps/ubuntu/noble/*'
            dokken/centos-7: 'dokken/centos-7/**'
            dokken/centos-stream-9: 'dokken/centos-stream-9/**'
            dokken/oraclelinux-7: 'dokken/oraclelinux-7/**'
            dokken/oraclelinux-8: 'dokken/oraclelinux-8/**'
            dokken/oraclelinux-9: 'dokken/oraclelinux-9/**'
            dokken/ubuntu-20.04: 'dokken/ubuntu-20.04/**'
            dokken/ubuntu-22.04: 'dokken/ubuntu-22.04/**'
            dokken/ubuntu-24.04: 'dokken/ubuntu-24.04/**'
            doctl: 'doctl/**'
            erlang/26/slim: 'erlang/26/slim/**'
            erlang/26: 'erlang/26/**'
            flake8: 'flake8/**'
            fpm: 'fpm/**'
            go2chef: 'go2chef/**'
            golang/1.20/jammy: 'golang/1.20/jammy/**'
            golang/1.21/jammy: 'golang/1.21/jammy/**'
            jupyter/docker-stacks-foundation: 'jupyter/docker-stacks-foundation/**'
            jupyter/base-notebook: 'jupyter/base-notebook/**'
            jupyter/minimal-notebook: 'jupyter/minimal-notebook/**'
            jupyter/scipy-notebook: 'jupyter/scipy-notebook/**'
            jupyter/datascience-notebook: 'jupyter/datascience-notebook/**'
            jupyter/tensorflow-notebook: 'jupyter/tensorflow-notebook/**'
            meshcmd: 'meshcmd/**'
            pgweb: 'pgweb/**'
            postgres/15/jammy: 'postgres/15/jammy/**'
            postgres/16/jammy: 'postgres/16/jammy/**'
            prometheus/blackbox_exporter: 'prometheus/blackbox_exporter/**'
            prometheus/node_exporter: 'prometheus/node_exporter/**'
            prometheus/prometheus: 'prometheus/prometheus/**'
            pulumi/pulumi-base: 'pulumi/pulumi-base/**'
            pulumi/pulumi-python: 'pulumi/pulumi-python/**'
            python/3.8/jammy: 'python/3.8/jammy/**'
            python/3.8/slim-jammy: 'python/3.8/slim-jammy/**'
            python/3.9/jammy: 'python/3.9/jammy/**'
            python/3.9/slim-jammy: 'python/3.9/slim-jammy/**'
            python/3.10/jammy: 'python/3.10/jammy/**'
            python/3.10/slim-jammy: 'python/3.10/slim-jammy/**'
            python/3.11/jammy: 'python/3.11/jammy/**'
            python/3.11/slim-jammy: 'python/3.11/slim-jammy/**'
            python/3.12/jammy: 'python/3.12/jammy/**'
            python/3.12/slim-jammy: 'python/3.12/slim-jammy/**'
            ros/humble/ubuntu/jammy: 'ros/humble/ubuntu/jammy/**'
            ros/iron/ubuntu/jammy: 'ros/iron/ubuntu/jammy/**'
            ros/noetic/ubuntu/focal: 'ros/noetic/ubuntu/focal/**'
            ruby/3.1/jammy: 'ruby/3.1/jammy/**'
            ruby/3.1/slim-jammy: 'ruby/3.1/slim-jammy/**'
            ruby/3.2/jammy: 'ruby/3.2/jammy/**'
            ruby/3.2/slim-jammy: 'ruby/3.2/slim-jammy/**'
            ruby/3.3/jammy: 'ruby/3.3/jammy/**'
            ruby/3.3/slim-jammy: 'ruby/3.3/slim-jammy/**'
            shellcheck: 'shellcheck/**'
            
  # Job to build and test each of the modified images
  build:
    needs: changes
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        # e.g. ['image1', 'image2'] if both image folders contains changes
        image: ${{ fromJSON(needs.changes.outputs.images) }}
    if: ${{ needs.changes.outputs.images != '' && needs.changes.outputs.images != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: boxcutter/container-build-publish-action@main
        with:
          workdir: ${{ matrix.image }}
          dockerhub-username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          dockerhub-password: ${{ secrets.CONTAINER_DESCRIPTION_PASSWORD }}
