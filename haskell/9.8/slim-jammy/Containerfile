# syntax=docker/dockerfile:1
ARG CONTAINER_REGISTRY=docker.io
FROM $CONTAINER_REGISTRY/ubuntu:jammy-20240212 AS base
FROM base AS download-stack

ARG STACK_URL_AMD64
ARG STACK_SHA256_AMD64
ARG STACK_URL_ARM64
ARG STACK_SHA256_ARM64
ARG STACK_RELEASE_KEY

RUN <<EOF
  apt-get update
  apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg
  dpkgArch="$(dpkg --print-architecture)"
  case "${dpkgArch##*-}" in \
    amd64) \
      STACK_URL="$STACK_URL_AMD64" \
      STACK_SHA256="$STACK_SHA256_AMD64" \
      ;; \
    arm64) \
      STACK_URL="$STACK_URL_ARM64" \
      STACK_SHA256="$STACK_SHA256_ARM64" \
      ;; \
    *) echo "unsupported architecture"; exit 1 ;; \
  esac
  curl -fsSL -o /tmp/stack.tar.gz ${STACK_URL}
  echo "${STACK_SHA256} /tmp/stack.tar.gz" | sha256sum --strict --check -
  curl -fsSL -o /tmp/stack.tar.gz.asc "${STACK_URL}.asc";
  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME
  gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "$STACK_RELEASE_KEY"
  gpg --batch --verify /tmp/stack.tar.gz.asc /tmp/stack.tar.gz
  gpgconf --kill all
  mkdir -p /tmp/stack
  tar xzvf /tmp/stack.tar.gz -C /tmp/stack --strip-components=1
EOF

FROM base AS download-cabal

ARG CABAL_INSTALL_URL_AMD64
ARG CABAL_INSTALL_SHA256_AMD64
ARG CABAL_INSTALL_URL_ARM64
ARG CABAL_INSTALL_SHA256_ARM64
ARG CABAL_INSTALL_RELEASE_KEY

RUN <<EOF
  apt-get update
  apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    xz-utils
  dpkgArch="$(dpkg --print-architecture)"
  case "${dpkgArch##*-}" in \
    amd64) \
      CABAL_INSTALL_URL="$CABAL_INSTALL_URL_AMD64" \
      CABAL_INSTALL_SHA256="$CABAL_INSTALL_SHA256_AMD64" \
      ;; \
    arm64) \
      CABAL_INSTALL_URL="$CABAL_INSTALL_URL_ARM64" \
      CABAL_INSTALL_SHA256="$CABAL_INSTALL_SHA256_ARM64" \
      ;; \
    *) echo "unsupported architecture"; exit 1 ;; \
  esac
  curl -fsSL -o /tmp/cabal-install.tar.gz ${CABAL_INSTALL_URL}
  echo "${CABAL_INSTALL_SHA256} /tmp/cabal-install.tar.gz" | sha256sum --strict --check -
  curl -fsSL -o /tmp/SHA256SUMS "${CABAL_INSTALL_SHA256SUMS_URL}"
  curl -fsSL -o /tmp/SHA256SUMS.sig "${CABAL_INSTALL_SHA256SUMS_URL}.sig"
  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME
  gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "$CABAL_INSTALL_RELEASE_KEY"
  gpg --batch --verify /tmp/SHA256SUMS.sig /tmp/SHA256SUMS
  grep "$CABAL_INSTALL_SHA256" /tmp/SHA256SUMS
  gpgconf --kill all;
  mkdir -p /tmp/cabal-install
  tar xvf /tmp/cabal-install.tar.gz -C /tmp/cabal-install
EOF

FROM base AS download-ghc

ARG GHC_VERSION
ARG GHC_URL_AMD64
ARG GHC_SHA256_AMD64
ARG GHC_URL_ARM64
ARG GHC_SHA256_ARM64
ARG GHC_RELEASE_KEY

RUN <<EOF
  apt-get update
  apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gcc \
    g++ \
    gnupg \
    make \
    xz-utils
  dpkgArch="$(dpkg --print-architecture)"
  case "${dpkgArch##*-}" in \
    amd64) \
      GHC_URL="$GHC_URL_AMD64" \
      GHC_SHA256="$GHC_SHA256_AMD64" \
      ;; \
    arm64) \
      GHC_URL="$GHC_URL_ARM64" \
      GHC_SHA256="$GHC_SHA256_ARM64" \
      ;; \
    *) echo "unsupported architecture"; exit 1 ;; \
  esac
  curl -fsSL -o /tmp/ghc.tar.xz ${GHC_URL}
  echo "${GHC_SHA256} /tmp/ghc.tar.xz" | sha256sum --strict --check -
  GNUPGHOME="$(mktemp -d)"; export GNUPGHOME
  curl -fsSL -o /tmp/ghc.tar.xz.sig "${GHC_URL}.sig"
  gpg --batch --keyserver keyserver.ubuntu.com --receive-keys "$GHC_RELEASE_KEY"
  gpg --batch --verify /tmp/ghc.tar.xz.sig /tmp/ghc.tar.xz
  gpgconf --kill all
  mkdir -p /tmp/ghc
  tar xvf /tmp/ghc.tar.xz -C /tmp/ghc --strip-components=1
EOF

WORKDIR /tmp/ghc

RUN <<EOF
  ./configure --prefix "/opt/ghc/$GHC_VERSION"
  make install
  find "/opt/ghc/$GHC_VERSION/" \( -name "*_p.a" -o -name "*.p_hi" \) -type f -delete
EOF

FROM base

ARG GHC_VERSION

ENV PATH /root/.cabal/bin:/root/.local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH

COPY --from=download-stack /tmp/stack /usr/local/bin
COPY --from=download-cabal /tmp/cabal-install /usr/local/bin
COPY --from=download-ghc /opt/ghc/${GHC_VERSION}/ /opt/ghc/${GHC_VERSION}/

RUN <<EOF
  apt-get update
  apt-get install -y --no-install-recommends \
    gcc \
    libc6-dev \
    libgmp-dev
  stack --version
  stack config set system-ghc --global true
  stack config set install-ghc --global false
  cabal --version
  "/opt/ghc/${GHC_VERSION}/bin/ghc" --version 
EOF

CMD ["ghci"]
